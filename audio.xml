<?xml version="1.0" encoding="UTF-8"?>
<Audio version="1.0" timeUnit="ms" gain="-10dB">


<!--
This simple oscillator configuration uses a sawtooth
waveform and plays through a lowpass filter and a stereopannernode.

Effective parameters to control are:

OscillatorNode.frequency or detune for pitch
BiquadFilterNode.frequency or detune for timbre
StereoPannerNode.pan for panning
-->
	<Chain id="Oscillator_Sawtooth">
		<OscillatorNode type="sawtooth"></OscillatorNode>
		<BiquadFilterNode></BiquadFilterNode>
		<StereoPannerNode></StereoPannerNode>
	</Chain>


<!--

This configuration plays white noise using an AudioWorkletNode playing
band-pass BiquadFilterNode with Q set to 70 giving a whistling effect.
The signal is routed through a GainNode and a StereoPannerNode to add
accesspoints for modulation.

Useful parameters to control are:

BiquadFilterNode.frequency or detune for brightness
BiquadFilterNode.Q for the screeming effect
GainNode.gain for volume
StereoPannerNode.pan for panning

The AudioWorkletNode can generate any sound from a javascript object.
The example script below generates white noise by adding random sample
values to the audio buffer. (This is quite advanced and is not recommended
for beginners. Also controlling AudioWorkletNode parameters from WebAudioXML
is not yet implemented.
(Read more on https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode)
-->
	<Chain id="Worklet_Noise1">
		<AudioWorkletNode src="sound-data/white-noise-processor.js"></AudioWorkletNode>


<!--
The BiquadFilterNode filters the sound and can have the following attributes. It has the following attributes. All attributes can be set to a fixed value. The attributes
with numeric values can be controlled by WebAudioXML Sonification Toolkit.
(read more on https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode)

type: (lowpass, highpass, bandpass, lowshelf, highshelf, peaking, notch and allpass)
detune: frequency offset in cent (https://en.wikipedia.org/wiki/Cent_%28music%29)
frequency: cutoff frequency for the filter
gain: the boost or attenuation of the frequencies specified
Q: the "q-factor" of the filter (https://en.wikipedia.org/wiki/Q_factor)
-->
		<BiquadFilterNode class="Bandpass_Filter" type="bandpass" Q="70"></BiquadFilterNode>


<!-- 
The PannerNode positions the sound in a 3D-space
(read more on https://developer.mozilla.org/en-US/docs/Web/API/PannerNode)
-->
		<PannerNode panningModel="HRTF" rotationZ="-1" coneInnerAngle="0" coneOuterAngle="360" coneOuterGain="1" positionZ="1" positionX="2"></PannerNode>


<!--
The GainNode controls the volume of the audio signal. The attribute "gain" can
be set to a fixed value ("0" = no sound, "1" = max volume) or controlled by the
WebAudioXML Sonification Toolkit.
-->
		<GainNode></GainNode>

	</Chain>


	<Mixer id="Oscillator_Square">
<!-- This Sound module is built with a Mixer element containing two Chain elements.
The first Chain contains an OscillatorNode that is sent through a BiquadFilterNode.
The second Chain contains an OscillatorNode that is used to modulate the filter in
first Chain.

Useful parameters to control are:

Carrier.OscillatorNode.frequency or detune for pitch
Modulator.modulatorInput1.gain for vibrator
-->
		<Chain class="Carrier">
<!-- The OscillatorNode generates a pitched, electronical sound.  (Read more on https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode)
It has the following attributes. All attributes can be set to a fixed value. The attributes
with numeric values can be controlled by WebAudioXML Sonification Toolkit.

detune: offsets the frequency in cent (https://en.wikipedia.org/wiki/Cent_%28music%29)
frequency: controls the pitch (440 Hz is "normal A" )
type: "sine", "triangle", "sawtooth" or "square" (diffent sound characters)
-->
			<OscillatorNode type="square"></OscillatorNode>

<!-- This BiquadFilterNode is setup to recieve a modulator signal
from the OscillatorNode below. The result is a filter vibrato where
the amount of vibrato can be controlled by mapping a variable in WebAudioXML
Sonification Toolkit to the gain of the modulating OscillatorNode.
-->
			<BiquadFilterNode type="lowpass" frequency="500">
				<detune id="modulatorInput1"></detune>
			</BiquadFilterNode>

		</Chain>

		<Chain class="Modulator">

<!-- This OscillatorNode works as a modulator (LFO - Low Frequency Oscillator)
for the filter above.
The frequency can be set to a fixed value or be controlled by WebAudioXML
Sonification Toolkit. The gain attribute controls the amount of vibrato.
-->
			<OscillatorNode class="LFO" frequency="5"></OscillatorNode>

<!-- This GainNode is used as a target for WebAudioXML Sonification Toolkit.
It makes it possible for a variable to control the amount of filter vibrato.
The gain attribute is set to "0" from start to not make any modulation if
variable is mapped.
-->
			<GainNode class="LFO_amount" gain="0"></GainNode>

<!-- This Gain is used to multiply the output value to oscillate between
-1200 to 1200. The output attribute is set to #modulatorInput1 to affect the
detune attribute of the filter above. 1200 cent equals one octave in pitch.
-->
			<GainNode output="#modulatorInput1" gain="1200"></GainNode>
		</Chain>

	</Mixer>

	<Chain id="Looper_Music">

<!--
The AudioBufferSourceNode is used to playback audio files. This setup
is good for playing back sound files LONGER than just a short hit. It is useful
for looping music (as in this example) or playing background environmental
recordings with a length up to maximum the length of the sonification.

The "loop"-attribute is good to set to "true" so it never gets quiet as long as
the sonification runs.
The "playbackRate" attribute can be set to a fixed value or controlled by the
WebAudioXML Sonification Toolkit. "1" is normal speed. "2" is double. "0" stops
the playback and negative values playes the audio backwards.

Useful parameters to control are:

AudioBufferSourceNode.playbackRate for pitch
BiquadFilterNode.frequency or detune for timbre
-->
		<AudioBufferSourceNode src="audio/loop1.mp3" loop="true"></AudioBufferSourceNode>

<!--
See description above. The settings for this filter makes it let all frequencies
through from the beginning. By changing the type and/or the frequency - either to
a fixed value or controlled by the WebAudioXML Sonification Toolkit - it will start
to filter the sound.
-->
		<BiquadFilterNode type="lowpass" frequency="20000"></BiquadFilterNode>

	</Chain>

	<Mixer id="Trigger_Footsteps">
		<Chain>

<!-- 
The "Synth" element makes it possible to trigger short sound files repeatedly.
In this example, two "Voice" elements with different sound files result in the two
files playing back one after another.
By setting voiceselect="random" the files will be randomly selected.
There can be any number of voices with different files.

Useful parameters to control are:

Synth.trigger for trigger speed
BiquadFilterNode.frequency or detune for timbre
StereoPannerNode.pan for stereo panning
ReverbSend.gain for reverb control
-->
			<Synth voiceselect="next">
				<Voice>
					<AudioBufferSourceNode src="audio/step1.mp3"></AudioBufferSourceNode>
				</Voice>
				<Voice>
					<AudioBufferSourceNode src="audio/step2.mp3"></AudioBufferSourceNode>
				</Voice>
			</Synth>

			<BiquadFilterNode type="lowpass" frequency="20000"></BiquadFilterNode>

			<StereoPannerNode></StereoPannerNode>

<!--
Send:
The last object in the Chain is a send-element. It splits the signal and sends
one dry signal to the next node (the GainNode in this case) while there is also
a signal sendt to the input of the chain below with id="reverb1" using the
"output"-attribute set to "#reverb1". The "gain"-attribute can be set to a fixed
value or controlled dynamically with the WebAudioXML Sonification Toolkit. Setting
it to "0.25" as in this example turns the reverb level down from the beginning.
(Read more about routing signals: https://github.com/hanslindetorp/WebAudioXML/wiki/Connecting)
-->
			<Send class="ReverbSend" output="#reverb1" gain="0"></Send>

<!--
By having a GainNode AFTER the ReverbSend, the dry (without reverb) level can
be controlled separately from the wet (with reverb). I.e. The WebAudioXML
Sonification Toolkit can INCREASE the reverb send level and DECREASE the dry
signal using ONE variable
-->
			<GainNode></GainNode>
		</Chain>


		<Chain id="reverb1">

<!-- 
This is a Chain with a "convolution-reverb" (Read more:
https://en.wikipedia.org/wiki/Convolution_reverb). The audio file defining the reverb
is placed inside the fx-folder. It's possible to create your own convolution files or
downloading from i.e. https://www.voxengo.com/impulses/ 
-->
			<ConvolverNode src="audio/fx/large-bottle-hall.wav"></ConvolverNode>
		</Chain>

	</Mixer>


</Audio>
